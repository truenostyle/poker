<style>
        #chat {
    height: 200px;
    overflow-y: auto;
    display: flex;
    flex-direction: column; 
}

#main-chat {
    position: absolute;
    bottom: 0px;
}


#message-input {
    margin-top: auto;
}

#settings {
    background-color: white;
    border-radius: 1px;
    border: 1px blueviolet solid;
    width: 200px;
    height: 100px;
    position: absolute;
    bottom: 0px;
    left: 33%;
    display: none;
}
</style>

<div class="container-fluid text-center bg-image-map">
    <div class="d-flex justify-content-center">
        <div class="position-absolute" style="top: 7%; left: 49.5%; height: 125px; width: 125px;">
        <div style="text-align: center; color: black; font-size: 20px; font-weight: bold;">Лобби 1</div>
        <a id="room1" href="./room1" style="background-color: black; height: 125px; width: 125px;">
           <div style="height: 125px; width: 125px; color: white; background-color: white; opacity: 0.4;"></div>
        </a>
        
    </div>
    
    <div id="settings">
        <h3>Настройки</h3>
        <input class="form-check-input" id="chat-history" type="checkbox" >
         <label class="form-check-label" for="chat-history">
            История чата
        </label>
    </div>
    
    </div>
    <img src="https://upload.wikimedia.org/wikipedia/ru/f/f6/Kirby_FL.png" alt="Moving Image" id="player1" style="position: absolute; width: 50px; height: 50px; left: 0; top: 0;">
    <img src="https://upload.wikimedia.org/wikipedia/ru/f/f6/Kirby_FL.png" alt="Moving Image" id="player2" style="position: absolute; width: 50px; height: 50px; left: 0; top: 0;">

</div>
<div class="col-4 bg-white d-flex flex-column" id="main-chat">
    <div id="chat" class="border p-3">
        <div id="chat-messages" class="mb-3"></div>
    </div>
    <input type="text" id="message-input" class="form-control mb-2" placeholder="Введите ваше сообщение">
    <div class="row">
        <button id="send-message" class="btn btn-primary m-2  col-7">Отправить</button>
        <button id="settings-button" class="btn btn-primary m-2">Настройки</button>
        <button id="get-stats" class="btn btn-primary m-2">Статистика</button>
    </div>
    
</div>
            


    
<script>

// чат
// На странице чата
const socket = io();
 
document.addEventListener("DOMContentLoaded", function () {
    const messageInput = document.getElementById("message-input");
    const sendMessageButton = document.getElementById("send-message");
    const chatMessages = document.getElementById("chat-messages");
    const chatHistoryCheckbox = document.getElementById("chat-history");

    const urlSearchParams = new URLSearchParams(window.location.search);
    const nickname = urlSearchParams.get("nickname");
    const room = "mapRoom";


    document.getElementById('get-stats').addEventListener('click', function () {
        socket.emit('getStats');
    });


     document.getElementById('settings-button').addEventListener('click', function () {
        const settingsWindow = document.getElementById('settings');
        if(settingsWindow.style.display === 'none') {
            settingsWindow.style.display = 'block';
        }
        else {
            settingsWindow.style.display = 'none'
        }
        
    });

    sendMessageButton.addEventListener("click", function () {
        const message = messageInput.value;
        if (message.trim() !== "") {
            // Отправляем сообщение, никнейм и room
            console.log("Отправляю на сервер: " + message + " --- " + room);
            socket.emit("sendMessage", { message, nickname, room });
            messageInput.value = "";
        }
    });

    socket.on("receiveMessage", (data) => {

        const { nickname, message } = data;

        const messageElement = document.createElement("div");
        messageElement.textContent = `${nickname}: ${message}`;
        
        chatMessages.appendChild(messageElement);
    });

    chatHistoryCheckbox.addEventListener('change', function() {
    if (this.checked) {
        socket.emit("requestChatHistory", { room });
    }
    else {
        chatMessages.innerHTML = '';
    }
});

    // Запрос истории чата при загрузке страницы
    

    socket.on("chatHistory", function (history) {
        // Очистите текущий чат перед добавлением истории
        chatMessages.innerHTML = '';

        // Добавьте каждое сообщение из истории чата
        history.forEach(item => {
            const messageElement = document.createElement('div');
            messageElement.textContent = `${item.nickname}: ${item.message}`;
            chatMessages.appendChild(messageElement);
        });
    });
});



// остальное

document.addEventListener('DOMContentLoaded', () => {
    const players = {
        player1: { posX: 0, posY: 0 },
        player2: { posX: 0, posY: 0 }
    };

    socket.emit('choiceChar');
    let numChar = 0;
    socket.on('yourChar', (temp) => {
        numChar += temp;
        console.log(numChar);
    });

    // Обработка события движения от сервера
    socket.on('move', ({ player, posX, posY }) => {
        // Обновление координат на всех клиентах
        const playerElement = document.getElementById(player);
        playerElement.style.left = `${posX}px`;
        playerElement.style.top = `${posY}px`;
    });

    document.addEventListener('keydown', (event) => {
        const player = 'player' + numChar; // Здесь вы можете определить, какого игрока обрабатывать
        const playerElement = document.getElementById(player);
        const step = 10; // Шаг перемещения в пикселях

        switch (event.key) {
            case 'ArrowUp':
                players[player].posY -= step;
                break;
            case 'ArrowDown':
                players[player].posY += step;
                break;
            case 'ArrowLeft':
                players[player].posX -= step;
                break;
            case 'ArrowRight':
                players[player].posX += step;
                break;
        }

        playerElement.style.left = `${players[player].posX}px`;
        playerElement.style.top = `${players[player].posY}px`;

        // Отправка координат на сервер
        socket.emit('move', { player, posX: players[player].posX, posY: players[player].posY });
        checkOverlap(players[player].posX, players[player].posY);
    });
});


const urlSearchParams1 = new URLSearchParams(window.location.search);
const nickname = urlSearchParams1.get("nickname");
function checkOverlap(x, y) {
    const links = document.querySelectorAll('.container-fluid a');
    links.forEach(link => {
        const rect = link.getBoundingClientRect();
        if (x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom) {
            window.location.href = link.href + "?nickname=" + encodeURIComponent(nickname);
        }
    });
}
</script>