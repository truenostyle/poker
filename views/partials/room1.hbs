<style>

.poker-table {
    height: 100vh;
    width: 100%;

    /* Параметр для настройки размера стола */
    &.large {
        width: 1200px;
    }
}

.player-area {
    position: absolute;
    left: 10px; /* Позиционирование слева от центра */
    bottom: 10%; /* Немного выше нижнего края страницы */
    /* Другие стили по желанию */
}

.player-hand {
    display: flex; /* Карты игрока в ряд */
}

#playerHand1 {
    position: absolute;
    bottom: 20%; /* Подогнать положение */
    left: 50%;
    transform: translateX(-50%);
    display: flex; /* Расположить карты в ряд */
}

#playerHand2 {
    position: absolute;
    bottom: 20%; /* Подогнать положение */
    left: 30%;
    transform: translateX(-50%);
    display: flex; /* Расположить карты в ряд */
}

#tableCards {
    position: absolute;
    bottom: 52%; /* Поднять карты выше надписи "Общий банк" */
    left: 50%;
    transform: translate(-50%, 50%);
    display: flex; /* Расположить карты в ряд */
}
.player-chips {
    /* Общие стили для элементов */
}

.button-container {
    position: absolute;
    right: 10px;
    bottom: 10px;
    display: flex;
    flex-direction: column; /* Элементы располагаются вертикально */
}

#betAmount {
    width: 100px;
    height: 30px;
    border: 1px solid #000;
    padding: 10px;
    font-size: 16px;
}
.button-row {
    display: flex; /* Кнопки в строку */
}

.button-row button {
    margin-left: 5px; /* Отступы между кнопками */
}

/* Первой кнопке отступ не нужен */
.button-row button:first-child {
    margin-left: 0;
}

#callButton { bottom: 10px; }
#raiseButton { bottom: 60px; }
#foldButton { bottom: 110px; }
#checkButton { bottom: 160px; }

/* Фишки игрока ниже центра экрана */
#playerChips1 {
    position: absolute;
    left: 50%;
    bottom: 30%;
    transform: translateX(-50%);
}
#playerChips2 {
    position: absolute;
    left: 30%;
    bottom: 30%;
    transform: translateX(-50%);
}



/* Общий банк по центру экрана */
#totalPot {
    position: absolute;
    left: 50%;
    top: 55%;
    transform: translate(-50%, -50%);
}
.button {
    background-color: #000;
    color: #fff;
    border: 1px solid #000;
    padding: 10px 20px;
    font-size: 18px;
    cursor: pointer;
}

.button:hover {
    background-color: #ccc;
}

.card {
    border: 1px solid #000; /* Обводка */
    border-radius: 5px; /* Скругление углов */
    padding: 5px;
    text-align: center;
    margin: 5px;
    width: 50px; /* Фиксированная ширина */
    height: 70px; /* Фиксированная высота */
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.card-rank, .card-suit {
    display: block; /* Каждый элемент на новой строке */
}
    </style>

<div class="container-fluid text-center bg-image-room1">

<div id="pokerTable" class="poker-table"> 
<div id="tableCards"></div> 
<div id="playerHand1" class="player-hand"></div>
<div id="playerHand2" class="player-hand"></div> 


<div id="playerChips1" class="player-chips"></div> 
<div id="playerChips2" class="player-chips"></div>  

<div class="button-container">
<input type="number" id="betAmount" placeholder="Ставка" max="" value="0">
    <div class="button-row">
        <button id="stopGame">Stop Game</button>
        <button id="startButton">Join</button>
        <button id="callButton">Call</button>
        <button id="foldButton">Fold</button>
        <button id="checkButton" style="display: none;">Check</button>
    </div>
</div> 
        <div id="totalPot">Общий банк: 0</div>
        <!-- Другие элементы игры -->
</div>
</div>


 
<script> 
const suits = ['♥', '♦', '♣', '♠'];
const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'В', 'Д', 'К', 'Т'];

const urlSearchParams = new URLSearchParams(window.location.search);
const nickname = urlSearchParams.get("nickname");
const tableCardsElement = document.getElementById('tableCards');

const socket = io();

document.addEventListener('DOMContentLoaded', function() {
    loadGame();
});

function loadGame() {
    socket.emit('loadGame');
    
}

socket.on('loadData', (players) => {
    if (players && players.length >= 2) {
        console.log('Loaded data:', players);
        getPlayersChips();

    } else {
        console.log('No players data available');
        // Обработка ситуации, когда данных об игроках нет или их недостаточно
    }
});


socket.on('PlayersIsNull', () => {
    console.log('Players is null');
    // Обработка ситуации, когда массив игроков пуст
});


document.getElementById('callButton').addEventListener('click', function () {
    // Получаем сумму ставки от игрока
    const betAmount = parseInt(document.getElementById('betAmount').value);

    if (betAmount <= 0) {
        alert("Bet amount must be greater than 0");
    } else {
        // Логика для кнопки Call
        socket.emit('playerAction', { action: 'call', amount: betAmount });
    }

    getPlayersChips();
});


document.getElementById('foldButton').addEventListener('click', function () {
    // Логика для кнопки Fold
    socket.emit('playerAction', { action: 'fold', amount: 0 });
});

document.getElementById('checkButton').addEventListener('click', () => {
    socket.emit('playerAction', { action: 'check', amount: 0 });
});

document.getElementById('startButton').addEventListener('click', () => {
    console.log("join");
    socket.emit('joinGame', nickname);
});

document.getElementById('stopGame').addEventListener('click', () => {
    console.log("join");
    socket.emit('stopGame');
});

socket.on('waitingForPlayer', () => {
        alert('Ожидаем второго игрока...');
    });

socket.on('gameFull', () => {
         alert('Игра уже началась. Попробуйте позже.');
    });

socket.on('startGame', (players) => {
    console.log('Game started with players:', players);

    getPlayersChips();
    

    // Другие обновления интерфейса, если необходимо
});

function getPlayersChips() {
    socket.emit('getPlayerDataRequest');
}

socket.on('playerDataResponse', (players, totalBank) => {
    for(let i = 0; i < players.length; i++)
        {
            if(players[i].nick === nickname)
            {
                document.getElementById('playerChips1').innerText = `${players[i].nick}: ${players[i].chips} chips`;
            }
            else {
                 document.getElementById('playerChips2').innerText = `${players[i].nick}: ${players[i].chips} chips`;
            }
        }
    document.getElementById('totalPot').innerText = totalBank;
    // Обработка полученных данных
});

socket.on('dealCards', ({ hand, tableCards }) => {
    console.log('Dealing cards:', hand, tableCards);

    const playerHandElement = document.getElementById('playerHand1');
    playerHandElement.innerHTML = ''; // Очистить предыдущие карты

    // Отобразите только свои карты
    for (const card of hand) {
        const cardElement = document.createElement('div');
        cardElement.innerText = `${card.rank}${card.suit}`;
        playerHandElement.appendChild(cardElement);
    }

    // Отобразите карты на столе
    
    tableCardsElement.innerHTML = ''; // Очистить предыдущие карты
    for (const card of tableCards) {
        const cardElement = document.createElement('div');
        cardElement.innerText = `${card.rank}${card.suit}`;
        tableCardsElement.appendChild(cardElement);
         cardElement.style.display = 'none';
    }
    
});

socket.on('showFlop', () => {
    console.log("showFlop");
    document.getElementById("checkButton").style.display = 'block';
    // Показать только первые три карты
    for (let i = 0; i < 3; i++) {
        const cardElement = tableCardsElement.children[i];
        if (cardElement) {
            cardElement.style.display = 'inline-block';
        }
    }
});

socket.on('showTurn', () => {
    console.log("showTurn");

    // Показать только первые три карты
    for (let i = 0; i < 4; i++) {
        const cardElement = tableCardsElement.children[i];
        if (cardElement) {
            cardElement.style.display = 'inline-block';
        }
    }
});

socket.on('showRiver', () => {
    console.log("showRiver");

    // Показать только первые три карты
    for (let i = 0; i < 5; i++) {
        const cardElement = tableCardsElement.children[i];
        if (cardElement) {
            cardElement.style.display = 'inline-block';
        }
    }
});

socket.on('endRound', (result) => {
  // Логика для обработки результатов раунда
  console.log('Round ended:', result);
  // Здесь вы можете обновить интерфейс, отобразив победителя и другую информацию
  // Например: document.getElementById('result').innerText = result;
});
const buttons = document.querySelectorAll('.button-row button');
socket.on('playerActionDone', () => {
    
    disableButtons(buttons);
});

socket.on('playerActionNotDone', () => {

    enableButtons(buttons);
});

socket.on('yourTurn', (resp) => {
    disableButtons(buttons);
}); 
// Отключите все кнопки
function disableButtons(buttons) {
    buttons.forEach(button => {
        button.disabled = true;
    });
}

// Включите все кнопки
function enableButtons(buttons) {
    buttons.forEach(button => {
        button.disabled = false;
    });
}
</script>